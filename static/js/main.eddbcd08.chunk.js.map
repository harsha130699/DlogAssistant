{"version":3,"sources":["logo.svg","axios.js","Services/dlog.service.js","Components/AddLog/AddLog.js","Components/Learnings/Learnings.js","Components/Pomodoro/Pomodoro.js","Components/VIewLog/ViewLog.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","instance","axios","create","baseURL","DlogService","getDlogs","a","get","res","data","addDLog","task","post","item","removeDlog","id","delete","updateDlog","patch","AddLog","props","useState","currentDlogs","setCurrentDlogs","useEffect","existingLogs","currLog","setCurrLog","refresh","newDlogs","addLog","console","log","handleRemove","suffix","EnterOutlined","style","fontSize","color","InputItem","IsEditable","setIsEditable","logText","setLogText","handleKeyPress","target","keyCode","_id","Item","actions","width","cursor","display","onClick","onKeyDown","ArrowRightOutlined","value","onChange","e","className","allowClear","placeholder","orientation","bordered","height","maxHeight","overflowY","dataSource","renderItem","Learnings","Pomodoro","ViewLog","Header","Layout","Content","Footer","Sider","App","response","setResponse","setRes","socketIOClient","on","then","dateTime","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eddbcd08.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios';\r\nconst instance = axios.create({\r\n    baseURL: 'https://dlogservice.herokuapp.com/'\r\n});\r\nexport default instance;","import axios from '../axios';\r\n\r\n\r\nexport const DlogService = {\r\n\r\n    getDlogs : async()=>{\r\n        const res = await axios.get(\"/dlogs\")\r\n        return res.data\r\n    },\r\n    addDLog : async(task) => {\r\n      const item =await axios.post(\"/dlogs/addDlog\",{task:task})\r\n      return item.data\r\n    } ,\r\n\r\n     removeDlog : async (id) => {\r\n        await axios.delete(\"/dlogs/\"+id)\r\n      }\r\n      ,\r\n     updateDlog : async (id,task) => {\r\n        await axios.patch(\"/dlogs/\"+id,{task:task})\r\n      }\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { EnterOutlined, ArrowRightOutlined } from '@ant-design/icons';\r\nimport { List, Typography, Divider } from 'antd';\r\nimport { Input, Tooltip, Button } from 'antd';\r\nimport axios from '../../axios';\r\nimport { DlogService } from '../../Services/dlog.service'\r\nfunction AddLog(props) {\r\n    const getLogs = []\r\n    const [currentDlogs, setCurrentDlogs] = useState([])\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        setCurrentDlogs(props.existingLogs)\r\n\r\n    }, [props])\r\n    const [currLog, setCurrLog] = useState(\"\")\r\n    const handleKeyPress = (target) => {\r\n        console.log(\"Key pressed\")\r\n        if (target.keyCode === 13) {\r\n            console.log(\"Enter detected\")\r\n            addLog()\r\n        }\r\n    }\r\n\r\n    const refresh = async () => {\r\n        const newDlogs = await DlogService.getDlogs()\r\n        setCurrentDlogs(newDlogs)\r\n    }\r\n    const addLog = async () => {\r\n        console.log(\"Adding\")\r\n        const item = await DlogService.addDLog(currLog)\r\n        setCurrentDlogs(currentDlogs => [...currentDlogs, item])\r\n        setCurrLog(\"\")\r\n\r\n    }\r\n\r\n    const handleLogChange = (e) => {\r\n        setCurrLog(e.target.value)\r\n\r\n    }\r\n    const handleRemove = async (id) => {\r\n        // console.log(id)\r\n        await DlogService.removeDlog(id)\r\n        await refresh()\r\n\r\n\r\n    }\r\n    const suffix = (\r\n        <EnterOutlined\r\n            style={{\r\n                fontSize: 16,\r\n                color: '#1890ff',\r\n            }}\r\n        />\r\n    );\r\n    const InputItem = ({item}) => {\r\n        const [IsEditable,setIsEditable] = useState(false)\r\n        const [logText,setLogText] = useState(item.task)\r\n        const handleKeyPress = async (target) => {\r\n            console.log(\"Key pressed\")\r\n            if (target.keyCode === 13) {\r\n                console.log(\"Enter detected\")\r\n                setIsEditable(false); \r\n                await DlogService.updateDlog(item._id,logText);\r\n                await refresh()\r\n            }\r\n        }\r\n       return ( <List.Item \r\n            actions={[<div style={{ color: 'blue',width:\"10%\" ,cursor:\"pointer\" , display: IsEditable ? 'none':'block' }} onClick={()=>{setIsEditable(true)}}>Edit</div>, <div onClick={() => { handleRemove(item._id) }} style={{ color: 'red', width:\"10%\" ,cursor: \"pointer\" }}>Remove</div>]}\r\n        >\r\n            {IsEditable && <Input onKeyDown={handleKeyPress} suffix={<ArrowRightOutlined  onClick={async ()=>{setIsEditable(false); await DlogService.updateDlog(item._id,logText);await refresh() }}/>} value={logText} onChange={(e)=>{setLogText(e.target.value)}} style={{ width: \"100%\" }} item={item} /> }\r\n\r\n            {!IsEditable && <span>{logText}</span>}\r\n        </List.Item>\r\n       )\r\n\r\n    }\r\n    return (\r\n        <div className=\"compStyle\">\r\n            <Input allowClear={true}  value={currLog} onChange={handleLogChange} placeholder=\"Add Log\" suffix={suffix} onKeyDown={handleKeyPress} />\r\n            <Divider orientation=\"left\">Today's Dlogs</Divider>\r\n            <List\r\n                bordered\r\n                style={{ height: \"20vh\", maxHeight: \"20vh\", overflowY: 'scroll' }}\r\n                dataSource={currentDlogs}\r\n                renderItem={item => (\r\n                    <InputItem item={item}/>\r\n                    // <div>Hi</div>\r\n                )}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddLog\r\n","import React from 'react'\r\n\r\nfunction Learnings() {\r\n    return (\r\n        <div className=\"compStyle\">\r\n            Learnings component\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Learnings\r\n","import React from 'react'\r\n\r\nfunction Pomodoro() {\r\n    return (\r\n        <div className=\"compStyle\">\r\n            Pomodoro component\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pomodoro\r\n","import React from 'react'\r\nimport './ViewLog.css'\r\nfunction ViewLog() {\r\n    return (\r\n        <div className=\"compStyle\">\r\n            ViewLog component\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewLog\r\n","import React, { useEffect, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from './axios';\nimport AddLog from './Components/AddLog/AddLog';\nimport Learnings from './Components/Learnings/Learnings';\nimport Pomodoro from './Components/Pomodoro/Pomodoro';\nimport ViewLog from './Components/VIewLog/ViewLog';\nimport { Card } from 'antd';\nimport { Layout } from 'antd';\nconst { Header, Footer, Sider, Content } = Layout;\nconst ENDPOINT = \"https://dlogservice.herokuapp.com/\";\n\nfunction App() {\n  const [response, setResponse] = useState(\"\");\n  let [res,setRes] = useState([])\n\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n    socket.on(\"FromAPI\", data => {\n      setResponse(data);\n    });\n    axios.get(`/dlogs`).then(data=>{\n      setRes(data.data)\n    })\n\n  }, []);\n  \n\n  return (\n    <div >\n      <Layout>\n        <Header className='heading'>\n          <div>\n          It's <time dateTime={response}>{response}</time>\n          </div>\n      </Header>\n        <Content className=\"App\">\n          <Card className=\"eachComp\">\n            <AddLog existingLogs={res} />\n\n          </Card>\n          <Card className=\"eachComp\">\n            <Learnings />\n\n          </Card>\n          <Card className=\"eachComp\">\n            <Pomodoro />\n\n          </Card>\n          <Card className=\"eachComp\">\n            <ViewLog />\n\n          </Card>\n        </Content>\n      </Layout>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}